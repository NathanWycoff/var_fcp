Help on function jit in module jax._src.api:

jjiitt(fun: 'Callable', in_shardings=UnspecifiedValue, out_shardings=UnspecifiedValue, static_argnums: 'Union[int, Sequence[int], None]' = None, static_argnames: 'Union[str, Iterable[str], None]' = None, donate_argnums: 'Union[int, Sequence[int]]' = (), keep_unused: 'bool' = False, device: 'Optional[xc.Device]' = None, backend: 'Optional[str]' = None, inline: 'bool' = False, abstracted_axes: 'Optional[Any]' = None) -> 'stages.Wrapped'
    Sets up ``fun`` for just-in-time compilation with XLA.
    
    Args:
      fun: Function to be jitted. ``fun`` should be a pure function, as
        side-effects may only be executed once.
    
        The arguments and return value of ``fun`` should be arrays,
        scalars, or (nested) standard Python containers (tuple/list/dict) thereof.
        Positional arguments indicated by ``static_argnums`` can be anything at
        all, provided they are hashable and have an equality operation defined.
        Static arguments are included as part of a compilation cache key, which is
        why hash and equality operators must be defined.
    
        JAX keeps a weak reference to ``fun`` for use as a compilation cache key,
        so the object ``fun`` must be weakly-referenceable. Most :class:`Callable`
        objects will already satisfy this requirement.
      in_shardings: Pytree of structure matching that of arguments to ``fun``,
        with all actual arguments replaced by resource assignment specifications.
        It is also valid to specify a pytree prefix (e.g. one value in place of a
        whole subtree), in which case the leaves get broadcast to all values in
        that subtree.
    
        The valid resource assignment specifications are:
          - :py:obj:`None`, in which case the value will be replicated on all devices
          - :py:class:`XLACompatibleSharding`, which will decide how the value
            will be partitioned. With this, using a mesh context manager is not
            required.
          - :py:class:`PartitionSpec`, a tuple of length at most equal to the rank
            of the partitioned value. Each element can be a :py:obj:`None`, a mesh
            axis or a tuple of mesh axes, and specifies the set of resources assigned
            to partition the value's dimension matching its position in the spec.
    
        The size of every dimension has to be a multiple of the total number of
        resources assigned to it. This is similar to pjit's in_shardings.
      out_shardings: Like ``in_shardings``, but specifies resource
        assignment for function outputs. This is similar to pjit's
        out_shardings.
      static_argnums: An optional int or collection of ints that specify which
        positional arguments to treat as static (compile-time constant).
        Operations that only depend on static arguments will be constant-folded in
        Python (during tracing), and so the corresponding argument values can be
        any Python object.
    
        Static arguments should be hashable, meaning both ``__hash__`` and
        ``__eq__`` are implemented, and immutable. Calling the jitted function
        with different values for these constants will trigger recompilation.
        Arguments that are not arrays or containers thereof must be marked as
        static.
    
        If neither ``static_argnums`` nor ``static_argnames`` is provided, no
        arguments are treated as static. If ``static_argnums`` is not provided but
        ``static_argnames`` is, or vice versa, JAX uses
        :code:`inspect.signature(fun)` to find any positional arguments that
        correspond to ``static_argnames``
        (or vice versa). If both ``static_argnums`` and ``static_argnames`` are
        provided, ``inspect.signature`` is not used, and only actual
        parameters listed in either ``static_argnums`` or ``static_argnames`` will
        be treated as static.
      static_argnames: An optional string or collection of strings specifying
        which named arguments to treat as static (compile-time constant). See the
        comment on ``static_argnums`` for details. If not
        provided but ``static_argnums`` is set, the default is based on calling
        ``inspect.signature(fun)`` to find corresponding named arguments.
      donate_argnums: Specify which positional argument buffers are "donated" to
        the computation. It is safe to donate argument buffers if you no longer
        need them once the computation has finished. In some cases XLA can make
        use of donated buffers to reduce the amount of memory needed to perform a
        computation, for example recycling one of your input buffers to store a
        result. You should not reuse buffers that you donate to a computation, JAX
        will raise an error if you try to. By default, no argument buffers are
        donated.
        Note that donate_argnums only work for positional arguments, and keyword
        arguments will not be donated.
    
        For more details on buffer donation see the
        `FAQ <https://jax.readthedocs.io/en/latest/faq.html#buffer-donation>`_.
      keep_unused: If `False` (the default), arguments that JAX determines to be
        unused by `fun` *may* be dropped from resulting compiled XLA executables.
        Such arguments will not be transferred to the device nor provided to the
        underlying executable. If `True`, unused arguments will not be pruned.
      device: This is an experimental feature and the API is likely to change.
        Optional, the Device the jitted function will run on. (Available devices
        can be retrieved via :py:func:`jax.devices`.) The default is inherited
        from XLA's DeviceAssignment logic and is usually to use
        ``jax.devices()[0]``.
      backend: This is an experimental feature and the API is likely to change.
        Optional, a string representing the XLA backend: ``'cpu'``, ``'gpu'``, or
        ``'tpu'``.
      inline: Specify whether this function should be inlined into enclosing
        jaxprs (rather than being represented as an application of the xla_call
        primitive with its own subjaxpr). Default False.
    
    Returns:
      A wrapped version of ``fun``, set up for just-in-time compilation.
    
    Examples:
      In the following example, ``selu`` can be compiled into a single fused kernel
      by XLA:
    
      >>> import jax
      >>>
      >>> @jax.jit
      ... def selu(x, alpha=1.67, lmbda=1.05):
      ...   return lmbda * jax.numpy.where(x > 0, x, alpha * jax.numpy.exp(x) - alpha)
      >>>
      >>> key = jax.random.PRNGKey(0)
      >>> x = jax.random.normal(key, (10,))
      >>> print(selu(x))  # doctest: +SKIP
      [-0.54485  0.27744 -0.29255 -0.91421 -0.62452 -0.24748
      -0.85743 -0.78232  0.76827  0.59566 ]
    
      To pass arguments such as ``static_argnames`` when decorating a function, a common
      pattern is to use :func:`functools.partial`:
    
      >>> from functools import partial
      >>>
      >>> @partial(jax.jit, static_argnames=['n'])
      ... def g(x, n):
      ...   for i in range(n):
      ...     x = x ** 2
      ...   return x
      >>>
      >>> g(jnp.arange(4), 3)
      Array([   0,    1,  256, 6561], dtype=int32)
